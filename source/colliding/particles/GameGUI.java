

package colliding.particles;


import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;


public class GameGUI extends javax.swing.JFrame {

    private Simulation ptrToSimulation;
    private Runnable runRenderer;
    private boolean guiIsRunning;
    private boolean startNewGame;
    private boolean beginDrawingParticles;

    /**
     * Creates new form GameGUI
     */
    public GameGUI() {        
        initLookAndFeel();
        initComponents();
        
        runRenderer = new Runnable() {
            @Override
            public void run(){
                gameBoxPanel.repaint();
            }
        };
                
        setStartNewGame(false);
        guiIsRunning = true;   
        beginDrawingParticles = false;        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameBoxPanel = new javax.swing.JPanel() {
            @Override
            public void paint(Graphics g) {
                drawSimulation(g);
            }
        };
        startButton = new javax.swing.JButton();
        particleSlider = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Colliding Particles");
        setLocation(new java.awt.Point(300, 100));
        setResizable(false);

        gameBoxPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout gameBoxPanelLayout = new javax.swing.GroupLayout(gameBoxPanel);
        gameBoxPanel.setLayout(gameBoxPanelLayout);
        gameBoxPanelLayout.setHorizontalGroup(
            gameBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        gameBoxPanelLayout.setVerticalGroup(
            gameBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 369, Short.MAX_VALUE)
        );

        startButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        particleSlider.setMajorTickSpacing(1);
        particleSlider.setMaximum(20);
        particleSlider.setMinimum(1);
        particleSlider.setPaintLabels(true);
        particleSlider.setPaintTicks(true);
        particleSlider.setToolTipText("Sets the number of particles");
        particleSlider.setValue(8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gameBoxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                        .addComponent(particleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(particleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameBoxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        setStartNewGame(true);
        beginDrawingParticles = true;
    }//GEN-LAST:event_startButtonActionPerformed

    private static void initLookAndFeel() {        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    private void drawSimulation(Graphics graph) {  
        Graphics2D graph2d = (Graphics2D) graph;
        graph2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        graph2d.clearRect(0, 0, getBoxSizeX(), getBoxSizeY());
        
        if (beginDrawingParticles) {
            for (int i = 0; i < ptrToSimulation.getNumberOfParticles(); i++) {
                graph2d.fillOval(ptrToSimulation.particle[i].getCrdRectX(), 
                        ptrToSimulation.particle[i].getCrdRectY(), 
                        ptrToSimulation.particle[i].getDiam(), 
                        ptrToSimulation.particle[i].getDiam()
                ); 
            }
        }
    }
    
    
    public final void render() {
        EventQueue.invokeLater(runRenderer);
    }
    
    public final void receivePointerToSimulation(Simulation s) {
        ptrToSimulation = s;
    }    

    public final int getBoxSizeX() {
        return gameBoxPanel.getWidth();
    }
    
    public final int getBoxSizeY() {
        return gameBoxPanel.getHeight();
    }
    
    public final boolean getGUIIsRunning() {
        return guiIsRunning;
    }
    
    public final int getNumberOfParticles() {
        return particleSlider.getValue();
    }
    
    public final void setStartNewGame(boolean b) {
        startNewGame = b;
    }
    
    public final boolean getStartNewGame()  {
        return startNewGame;
    }    
  
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel gameBoxPanel;
    private javax.swing.JSlider particleSlider;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}

